apiVersion: apps/v1
kind: Deployment
metadata: { name: cas-api-deployment, namespace: ott-platform, labels: { app: cas-api } }
spec:
  replicas: 1
  selector: { matchLabels: { app: cas-api } }
  template:
    metadata: { labels: { app: cas-api } }
    spec:
      containers:
      - name: cas
        image: python:3.11-slim
        command: ["/bin/sh", "-c"]
        args: ["pip install flask pyjwt prometheus_flask_exporter && python /app/app.py"]
        ports: [ { containerPort: 5004 } ]
        readinessProbe:
          httpGet: { path: /health, port: 5004 }
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet: { path: /health, port: 5004 }
          initialDelaySeconds: 15
          periodSeconds: 10
        volumeMounts: [ { name: code, mountPath: /app } ]
      volumes: [ { name: code, configMap: { name: cas-api-code } } ]
---
apiVersion: v1
kind: Service
metadata: { name: cas-api-service, namespace: ott-platform }
spec:
  selector: { app: cas-api }
  ports: [ { name: http, port: 80, targetPort: 5004 } ]
---
apiVersion: v1
kind: ConfigMap
metadata: { name: cas-api-code, namespace: ott-platform }
data:
  app.py: |
    from flask import Flask, request, jsonify
    from prometheus_flask_exporter import PrometheusMetrics
    app = Flask(__name__); metrics = PrometheusMetrics(app)
    @app.get("/health")
    def h(): return ("ok",200)
    @app.get("/ready")
    def r(): return ("ok",200)
    @app.post("/cas/authorize")
    def authorize():
      b = request.get_json(force=True) or {}
      return jsonify(allowed=b.get("tier") in ("premium","gold"))
    if __name__=="__main__": app.run(host="0.0.0.0", port=5004)
