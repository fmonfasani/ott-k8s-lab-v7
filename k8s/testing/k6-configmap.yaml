apiVersion: v1
kind: ConfigMap
metadata: { name: k6-test-scripts, namespace: ott-platform }
data:
  ott-load-test.js: |
    import http from 'k6/http';
    import { check, group } from 'k6';
    import { Trend, Rate } from 'k6/metrics';
    export let errorRate = new Rate('ott_errors');
    export let startupTime = new Trend('startup_time');
    export let segFetch = new Trend('segment_fetch');

    export let options = {
      vus: 20, duration: '2m',
      thresholds: {
        'ott_errors': ['rate<0.02'],
        'startup_time': ['p(95)<2500'],
        'segment_fetch': ['p(95)<1500']
      }
    };

    export default function () {
      group('OTT Journey', function () {
        const gw = 'http://istio-ingressgateway.istio-system.svc.cluster.local';
        let t0 = Date.now();

        // Auth
        let login = http.post(`${gw}/auth/login`, JSON.stringify({username:'user',password:'pass'}), { headers: {'Content-Type':'application/json'} });
        check(login, { 'login 200': r => r.status === 200 }) || errorRate.add(1);

        // Catalog
        let cat = http.get(`${gw}/catalog/content123`); check(cat, { 'catalog 200': r => r.status === 200 }) || errorRate.add(1);
        let manifestUrl = cat.json('manifestUrl');

        // License
        let lic = http.post(`${gw}/license`, JSON.stringify({contentId:'content123',deviceId:'dev123'}), { headers: {'Content-Type':'application/json'} });
        check(lic, { 'license 200': r => r.status === 200 }) || errorRate.add(1);

        // Manifest
        let man = http.get(manifestUrl); check(man, { 'manifest 200': r => r.status === 200 }) || errorRate.add(1);
        let t1 = Date.now(); startupTime.add(t1 - t0);

        // Descargar 3 segmentos simples del manifiesto
        let lines = man.body.split('\n').filter(l => l.endsWith('.ts'));
        for (let i=0; i<Math.min(3, lines.length); i++){
          let segStart = Date.now();
          let seg = http.get(manifestUrl.replace('master.m3u8', lines[i]));
          check(seg, { 'segment 200': r => r.status === 200 }) || errorRate.add(1);
          segFetch.add(Date.now() - segStart);
        }
      });
    }
